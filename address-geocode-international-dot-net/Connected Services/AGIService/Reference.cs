//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AGIService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ResponseObject", Namespace="http://www.serviceobjects.com", ItemName="Response", KeyName="Key", ValueName="Value")]
    public class ResponseObject : System.Collections.Generic.Dictionary<string, AGIService.ResultObject>
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ResultObject", Namespace="http://www.serviceobjects.com", ItemName="Result")]
    public class ResultObject : System.Collections.Generic.List<AGIService.FieldObject>
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="FieldObject", Namespace="http://www.serviceobjects.com", ItemName="Field", KeyName="Key", ValueName="Value")]
    public class FieldObject : System.Collections.Generic.Dictionary<string, string>
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.serviceobjects.com", ConfigurationName="AGIService.IAGISoapService")]
    public interface IAGISoapService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.serviceobjects.com/IAGISoapService/PlaceSearch", ReplyAction="http://www.serviceobjects.com/IAGISoapService/PlaceSearchResponse")]
        System.Threading.Tasks.Task<AGIService.ResponseObject> PlaceSearchAsync(string SingleLine, string Address1, string Address2, string Address3, string Address4, string Address5, string Locality, string AdministrativeArea, string PostalCode, string Country, string Boundaries, string MaxResults, string SearchType, string Extras, string LicenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.serviceobjects.com/IAGISoapService/ReverseSearch", ReplyAction="http://www.serviceobjects.com/IAGISoapService/ReverseSearchResponse")]
        System.Threading.Tasks.Task<AGIService.ResponseObject> ReverseSearchAsync(string Latitude, string Longitude, string SearchRadius, string Country, string MaxResults, string SearchType, string LicenseKey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public interface IAGISoapServiceChannel : AGIService.IAGISoapService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public partial class AGISoapServiceClient : System.ServiceModel.ClientBase<AGIService.IAGISoapService>, AGIService.IAGISoapService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AGISoapServiceClient() : 
                base(AGISoapServiceClient.GetDefaultBinding(), AGISoapServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.DOTSAddressGeocodeInternational.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AGISoapServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(AGISoapServiceClient.GetBindingForEndpoint(endpointConfiguration), AGISoapServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AGISoapServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AGISoapServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AGISoapServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AGISoapServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AGISoapServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<AGIService.ResponseObject> PlaceSearchAsync(string SingleLine, string Address1, string Address2, string Address3, string Address4, string Address5, string Locality, string AdministrativeArea, string PostalCode, string Country, string Boundaries, string MaxResults, string SearchType, string Extras, string LicenseKey)
        {
            return base.Channel.PlaceSearchAsync(SingleLine, Address1, Address2, Address3, Address4, Address5, Locality, AdministrativeArea, PostalCode, Country, Boundaries, MaxResults, SearchType, Extras, LicenseKey);
        }
        
        public System.Threading.Tasks.Task<AGIService.ResponseObject> ReverseSearchAsync(string Latitude, string Longitude, string SearchRadius, string Country, string MaxResults, string SearchType, string LicenseKey)
        {
            return base.Channel.ReverseSearchAsync(Latitude, Longitude, SearchRadius, Country, MaxResults, SearchType, LicenseKey);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        #if !NET6_0_OR_GREATER
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        #endif
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.DOTSAddressGeocodeInternational))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.DOTSAddressGeocodeInternational))
            {
                return new System.ServiceModel.EndpointAddress("https://sws.serviceobjects.com/AGI/soap.svc/SOAP");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return AGISoapServiceClient.GetBindingForEndpoint(EndpointConfiguration.DOTSAddressGeocodeInternational);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return AGISoapServiceClient.GetEndpointAddress(EndpointConfiguration.DOTSAddressGeocodeInternational);
        }
        
        public enum EndpointConfiguration
        {
            
            DOTSAddressGeocodeInternational,
        }
    }
}
